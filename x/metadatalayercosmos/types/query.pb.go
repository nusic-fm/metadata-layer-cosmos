// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadatalayercosmos/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryFullTracksRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFullTracksRequest) Reset()         { *m = QueryFullTracksRequest{} }
func (m *QueryFullTracksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFullTracksRequest) ProtoMessage()    {}
func (*QueryFullTracksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{2}
}
func (m *QueryFullTracksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullTracksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullTracksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullTracksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullTracksRequest.Merge(m, src)
}
func (m *QueryFullTracksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullTracksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullTracksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullTracksRequest proto.InternalMessageInfo

func (m *QueryFullTracksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFullTracksResponse struct {
	// Returning a list of posts
	FullTrack []*FullTrack `protobuf:"bytes,1,rep,name=FullTrack,proto3" json:"FullTrack,omitempty"`
	// Adding pagination to response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFullTracksResponse) Reset()         { *m = QueryFullTracksResponse{} }
func (m *QueryFullTracksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFullTracksResponse) ProtoMessage()    {}
func (*QueryFullTracksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{3}
}
func (m *QueryFullTracksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullTracksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullTracksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullTracksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullTracksResponse.Merge(m, src)
}
func (m *QueryFullTracksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullTracksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullTracksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullTracksResponse proto.InternalMessageInfo

func (m *QueryFullTracksResponse) GetFullTrack() []*FullTrack {
	if m != nil {
		return m.FullTrack
	}
	return nil
}

func (m *QueryFullTracksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSectionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSectionRequest) Reset()         { *m = QueryGetSectionRequest{} }
func (m *QueryGetSectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSectionRequest) ProtoMessage()    {}
func (*QueryGetSectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{4}
}
func (m *QueryGetSectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSectionRequest.Merge(m, src)
}
func (m *QueryGetSectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSectionRequest proto.InternalMessageInfo

func (m *QueryGetSectionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSectionResponse struct {
	Section Section `protobuf:"bytes,1,opt,name=Section,proto3" json:"Section"`
}

func (m *QueryGetSectionResponse) Reset()         { *m = QueryGetSectionResponse{} }
func (m *QueryGetSectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSectionResponse) ProtoMessage()    {}
func (*QueryGetSectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{5}
}
func (m *QueryGetSectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSectionResponse.Merge(m, src)
}
func (m *QueryGetSectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSectionResponse proto.InternalMessageInfo

func (m *QueryGetSectionResponse) GetSection() Section {
	if m != nil {
		return m.Section
	}
	return Section{}
}

type QueryAllSectionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSectionRequest) Reset()         { *m = QueryAllSectionRequest{} }
func (m *QueryAllSectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSectionRequest) ProtoMessage()    {}
func (*QueryAllSectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{6}
}
func (m *QueryAllSectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSectionRequest.Merge(m, src)
}
func (m *QueryAllSectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSectionRequest proto.InternalMessageInfo

func (m *QueryAllSectionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSectionResponse struct {
	Section    []Section           `protobuf:"bytes,1,rep,name=Section,proto3" json:"Section"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSectionResponse) Reset()         { *m = QueryAllSectionResponse{} }
func (m *QueryAllSectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSectionResponse) ProtoMessage()    {}
func (*QueryAllSectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{7}
}
func (m *QueryAllSectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSectionResponse.Merge(m, src)
}
func (m *QueryAllSectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSectionResponse proto.InternalMessageInfo

func (m *QueryAllSectionResponse) GetSection() []Section {
	if m != nil {
		return m.Section
	}
	return nil
}

func (m *QueryAllSectionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySectionsRequest struct {
	FullTrackID uint64             `protobuf:"varint,1,opt,name=fullTrackID,proto3" json:"fullTrackID,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySectionsRequest) Reset()         { *m = QuerySectionsRequest{} }
func (m *QuerySectionsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySectionsRequest) ProtoMessage()    {}
func (*QuerySectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{8}
}
func (m *QuerySectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySectionsRequest.Merge(m, src)
}
func (m *QuerySectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySectionsRequest proto.InternalMessageInfo

func (m *QuerySectionsRequest) GetFullTrackID() uint64 {
	if m != nil {
		return m.FullTrackID
	}
	return 0
}

func (m *QuerySectionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySectionsResponse struct {
	FullTrack *FullTrack `protobuf:"bytes,1,opt,name=fullTrack,proto3" json:"fullTrack,omitempty"`
	// Returning a list of comments
	Sections []*Section `protobuf:"bytes,2,rep,name=sections,proto3" json:"sections,omitempty"`
	// Adding pagination to response
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySectionsResponse) Reset()         { *m = QuerySectionsResponse{} }
func (m *QuerySectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySectionsResponse) ProtoMessage()    {}
func (*QuerySectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{9}
}
func (m *QuerySectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySectionsResponse.Merge(m, src)
}
func (m *QuerySectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySectionsResponse proto.InternalMessageInfo

func (m *QuerySectionsResponse) GetFullTrack() *FullTrack {
	if m != nil {
		return m.FullTrack
	}
	return nil
}

func (m *QuerySectionsResponse) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *QuerySectionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStemRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetStemRequest) Reset()         { *m = QueryGetStemRequest{} }
func (m *QueryGetStemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStemRequest) ProtoMessage()    {}
func (*QueryGetStemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{10}
}
func (m *QueryGetStemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStemRequest.Merge(m, src)
}
func (m *QueryGetStemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStemRequest proto.InternalMessageInfo

func (m *QueryGetStemRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetStemResponse struct {
	Stem Stem `protobuf:"bytes,1,opt,name=Stem,proto3" json:"Stem"`
}

func (m *QueryGetStemResponse) Reset()         { *m = QueryGetStemResponse{} }
func (m *QueryGetStemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStemResponse) ProtoMessage()    {}
func (*QueryGetStemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{11}
}
func (m *QueryGetStemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStemResponse.Merge(m, src)
}
func (m *QueryGetStemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStemResponse proto.InternalMessageInfo

func (m *QueryGetStemResponse) GetStem() Stem {
	if m != nil {
		return m.Stem
	}
	return Stem{}
}

type QueryAllStemRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStemRequest) Reset()         { *m = QueryAllStemRequest{} }
func (m *QueryAllStemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStemRequest) ProtoMessage()    {}
func (*QueryAllStemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{12}
}
func (m *QueryAllStemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStemRequest.Merge(m, src)
}
func (m *QueryAllStemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStemRequest proto.InternalMessageInfo

func (m *QueryAllStemRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStemResponse struct {
	Stem       []Stem              `protobuf:"bytes,1,rep,name=Stem,proto3" json:"Stem"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStemResponse) Reset()         { *m = QueryAllStemResponse{} }
func (m *QueryAllStemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStemResponse) ProtoMessage()    {}
func (*QueryAllStemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{13}
}
func (m *QueryAllStemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStemResponse.Merge(m, src)
}
func (m *QueryAllStemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStemResponse proto.InternalMessageInfo

func (m *QueryAllStemResponse) GetStem() []Stem {
	if m != nil {
		return m.Stem
	}
	return nil
}

func (m *QueryAllStemResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStemsRequest struct {
	FullTrackID uint64             `protobuf:"varint,1,opt,name=fullTrackID,proto3" json:"fullTrackID,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStemsRequest) Reset()         { *m = QueryStemsRequest{} }
func (m *QueryStemsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStemsRequest) ProtoMessage()    {}
func (*QueryStemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{14}
}
func (m *QueryStemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStemsRequest.Merge(m, src)
}
func (m *QueryStemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStemsRequest proto.InternalMessageInfo

func (m *QueryStemsRequest) GetFullTrackID() uint64 {
	if m != nil {
		return m.FullTrackID
	}
	return 0
}

func (m *QueryStemsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStemsResponse struct {
	FullTrack *FullTrack `protobuf:"bytes,1,opt,name=fullTrack,proto3" json:"fullTrack,omitempty"`
	// Returning a list of comments
	Stems []*Stem `protobuf:"bytes,2,rep,name=stems,proto3" json:"stems,omitempty"`
	// Adding pagination to response
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStemsResponse) Reset()         { *m = QueryStemsResponse{} }
func (m *QueryStemsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStemsResponse) ProtoMessage()    {}
func (*QueryStemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{15}
}
func (m *QueryStemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStemsResponse.Merge(m, src)
}
func (m *QueryStemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStemsResponse proto.InternalMessageInfo

func (m *QueryStemsResponse) GetFullTrack() *FullTrack {
	if m != nil {
		return m.FullTrack
	}
	return nil
}

func (m *QueryStemsResponse) GetStems() []*Stem {
	if m != nil {
		return m.Stems
	}
	return nil
}

func (m *QueryStemsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMetadataRequest struct {
	FullTrackID uint64             `protobuf:"varint,1,opt,name=fullTrackID,proto3" json:"fullTrackID,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMetadataRequest) Reset()         { *m = QueryMetadataRequest{} }
func (m *QueryMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMetadataRequest) ProtoMessage()    {}
func (*QueryMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{16}
}
func (m *QueryMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadataRequest.Merge(m, src)
}
func (m *QueryMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadataRequest proto.InternalMessageInfo

func (m *QueryMetadataRequest) GetFullTrackID() uint64 {
	if m != nil {
		return m.FullTrackID
	}
	return 0
}

func (m *QueryMetadataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMetadataResponse struct {
	FullTrack *FullTrack `protobuf:"bytes,1,opt,name=fullTrack,proto3" json:"fullTrack,omitempty"`
	Sections  []*Section `protobuf:"bytes,2,rep,name=sections,proto3" json:"sections,omitempty"`
	// Returning a list of comments
	Stems []*Stem `protobuf:"bytes,3,rep,name=stems,proto3" json:"stems,omitempty"`
	// Adding pagination to response
	Pagination *query.PageResponse `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMetadataResponse) Reset()         { *m = QueryMetadataResponse{} }
func (m *QueryMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMetadataResponse) ProtoMessage()    {}
func (*QueryMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78d71708aed3678d, []int{17}
}
func (m *QueryMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadataResponse.Merge(m, src)
}
func (m *QueryMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadataResponse proto.InternalMessageInfo

func (m *QueryMetadataResponse) GetFullTrack() *FullTrack {
	if m != nil {
		return m.FullTrack
	}
	return nil
}

func (m *QueryMetadataResponse) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *QueryMetadataResponse) GetStems() []*Stem {
	if m != nil {
		return m.Stems
	}
	return nil
}

func (m *QueryMetadataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryParamsResponse")
	proto.RegisterType((*QueryFullTracksRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryFullTracksRequest")
	proto.RegisterType((*QueryFullTracksResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryFullTracksResponse")
	proto.RegisterType((*QueryGetSectionRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryGetSectionRequest")
	proto.RegisterType((*QueryGetSectionResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryGetSectionResponse")
	proto.RegisterType((*QueryAllSectionRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryAllSectionRequest")
	proto.RegisterType((*QueryAllSectionResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryAllSectionResponse")
	proto.RegisterType((*QuerySectionsRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QuerySectionsRequest")
	proto.RegisterType((*QuerySectionsResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QuerySectionsResponse")
	proto.RegisterType((*QueryGetStemRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryGetStemRequest")
	proto.RegisterType((*QueryGetStemResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryGetStemResponse")
	proto.RegisterType((*QueryAllStemRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryAllStemRequest")
	proto.RegisterType((*QueryAllStemResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryAllStemResponse")
	proto.RegisterType((*QueryStemsRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryStemsRequest")
	proto.RegisterType((*QueryStemsResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryStemsResponse")
	proto.RegisterType((*QueryMetadataRequest)(nil), "metadatalayercosmos.metadatalayercosmos.QueryMetadataRequest")
	proto.RegisterType((*QueryMetadataResponse)(nil), "metadatalayercosmos.metadatalayercosmos.QueryMetadataResponse")
}

func init() { proto.RegisterFile("metadatalayercosmos/query.proto", fileDescriptor_78d71708aed3678d) }

var fileDescriptor_78d71708aed3678d = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x5d, 0x6b, 0x13, 0x4b,
	0x18, 0xce, 0x24, 0x69, 0x4f, 0xcf, 0x14, 0x0a, 0x67, 0x4e, 0xcf, 0xb1, 0x04, 0x49, 0xe3, 0x8a,
	0xb6, 0x08, 0xcd, 0x9a, 0xb4, 0xb4, 0xb6, 0x4d, 0xbf, 0xa5, 0xa5, 0x68, 0xa1, 0x46, 0xaf, 0x04,
	0xa9, 0xdb, 0x66, 0x1a, 0x42, 0x77, 0xb3, 0x69, 0x76, 0x22, 0x96, 0x52, 0x28, 0xfe, 0x02, 0xc1,
	0x3f, 0xe1, 0x0f, 0x10, 0xbc, 0x53, 0xbc, 0x10, 0x0a, 0x22, 0x16, 0xf4, 0xc2, 0x2b, 0x91, 0xd6,
	0x9f, 0xe0, 0x0f, 0x90, 0x9d, 0x79, 0x77, 0xb3, 0xd9, 0xdd, 0x62, 0x66, 0x8d, 0x8a, 0x77, 0xed,
	0xec, 0xfb, 0xf1, 0x3c, 0xef, 0xc7, 0xcc, 0x43, 0xf0, 0xa0, 0x41, 0x99, 0x56, 0xd2, 0x98, 0xa6,
	0x6b, 0x7b, 0xb4, 0xbe, 0x65, 0x5a, 0x86, 0x69, 0xa9, 0xbb, 0x0d, 0x5a, 0xdf, 0xcb, 0xd6, 0xea,
	0x26, 0x33, 0xc9, 0x50, 0x88, 0x41, 0x36, 0xe4, 0x2c, 0xd5, 0x5f, 0x36, 0xcb, 0x26, 0xf7, 0x51,
	0xed, 0xbf, 0x84, 0x7b, 0xea, 0x7c, 0xd9, 0x34, 0xcb, 0x3a, 0x55, 0xb5, 0x5a, 0x45, 0xd5, 0xaa,
	0x55, 0x93, 0x69, 0xac, 0x62, 0x56, 0x2d, 0xf8, 0x7a, 0x05, 0x12, 0x6e, 0x6a, 0x16, 0x15, 0x59,
	0xd5, 0x07, 0xb9, 0x4d, 0xca, 0xb4, 0x9c, 0x5a, 0xd3, 0xca, 0x95, 0x2a, 0x37, 0x06, 0xdb, 0x4c,
	0x18, 0xd2, 0x9a, 0x56, 0xd7, 0x0c, 0x27, 0xda, 0xc5, 0x30, 0x8b, 0xed, 0x86, 0xae, 0xb3, 0xba,
	0xb6, 0xb5, 0x03, 0x46, 0x17, 0xc2, 0x8c, 0x2c, 0xba, 0xe5, 0xc9, 0x94, 0x0e, 0x35, 0x61, 0xd4,
	0x10, 0xdf, 0x95, 0x7e, 0x4c, 0x6e, 0xd9, 0x58, 0xd7, 0x79, 0xf2, 0x22, 0xdd, 0x6d, 0x50, 0x8b,
	0x29, 0x25, 0xfc, 0x6f, 0xcb, 0xa9, 0x55, 0x33, 0xab, 0x16, 0x25, 0x6b, 0xb8, 0x5b, 0x80, 0x1c,
	0x40, 0x19, 0x34, 0xdc, 0x9b, 0x57, 0xb3, 0x6d, 0x16, 0x34, 0x2b, 0x02, 0x2d, 0x26, 0x8f, 0x3e,
	0x0d, 0xc6, 0x8a, 0x10, 0x44, 0xb9, 0x8f, 0xff, 0xe7, 0x59, 0x96, 0x1b, 0xba, 0x7e, 0xc7, 0xa6,
	0xe5, 0xe4, 0x27, 0xcb, 0x18, 0x37, 0x6b, 0x06, 0xc9, 0x2e, 0x67, 0x21, 0x96, 0x5d, 0xe0, 0xac,
	0x68, 0x2b, 0x14, 0x38, 0xbb, 0xae, 0x95, 0x29, 0xf8, 0x16, 0x3d, 0x9e, 0xca, 0x33, 0x84, 0xcf,
	0x05, 0x52, 0x00, 0x99, 0x75, 0xfc, 0xb7, 0x7b, 0x3a, 0x80, 0x32, 0x89, 0xe1, 0xde, 0x7c, 0xbe,
	0x6d, 0x3e, 0xae, 0x67, 0xb1, 0x19, 0x84, 0xac, 0xb4, 0xa0, 0x8e, 0x73, 0xd4, 0x43, 0xdf, 0x45,
	0x2d, 0xe0, 0xb4, 0xc0, 0x1e, 0x86, 0xc2, 0xac, 0x50, 0x76, 0x5b, 0x74, 0xd3, 0x29, 0x4c, 0x1f,
	0x8e, 0x57, 0x4a, 0xbc, 0x20, 0xc9, 0x62, 0xbc, 0x52, 0x52, 0x76, 0x80, 0x9f, 0xd7, 0xd2, 0xe5,
	0xf7, 0x17, 0x1c, 0x41, 0x01, 0xaf, 0xb6, 0xcd, 0x0e, 0xfc, 0xa0, 0x5d, 0x4e, 0x18, 0xb7, 0x5f,
	0x0b, 0xba, 0xee, 0x83, 0xd5, 0xf1, 0x7e, 0x79, 0x53, 0x84, 0xf1, 0x49, 0x74, 0x80, 0x4f, 0xe7,
	0xfa, 0x75, 0x88, 0x70, 0x3f, 0x87, 0x0d, 0x91, 0xdd, 0x39, 0xce, 0xe0, 0xde, 0x6d, 0x67, 0x3c,
	0x56, 0xaf, 0x43, 0xdf, 0xbc, 0x47, 0xbe, 0xca, 0xc5, 0x23, 0x57, 0xee, 0x30, 0x8e, 0xff, 0xf3,
	0x41, 0x68, 0xce, 0xf9, 0xb6, 0x67, 0xce, 0x51, 0xd4, 0x39, 0x77, 0x83, 0x90, 0x9b, 0xb8, 0x07,
	0x2e, 0x19, 0x6b, 0x20, 0x1e, 0xad, 0x15, 0x45, 0x37, 0x82, 0xaf, 0x0b, 0x89, 0xe8, 0x5d, 0xb8,
	0x04, 0x97, 0x96, 0xbd, 0x0b, 0x8c, 0x1a, 0x67, 0xad, 0xcc, 0x06, 0xf4, 0xca, 0x35, 0x83, 0x3a,
	0xad, 0xe0, 0xa4, 0xfd, 0x3f, 0x94, 0x68, 0xa4, 0x7d, 0x46, 0x8c, 0x1a, 0x30, 0x59, 0x3c, 0x80,
	0x72, 0x0f, 0x70, 0xd8, 0x33, 0xec, 0xc1, 0xd1, 0xa9, 0x1d, 0x79, 0xea, 0x0c, 0x9b, 0x1b, 0x3f,
	0x40, 0x20, 0xf1, 0x43, 0x04, 0x3a, 0xb7, 0x17, 0x07, 0xf8, 0x1f, 0x31, 0x93, 0x8c, 0x1a, 0xbf,
	0x61, 0x27, 0xbe, 0x22, 0x78, 0xdc, 0x20, 0xff, 0x4f, 0x5b, 0x88, 0x25, 0xdc, 0x65, 0x3f, 0xa9,
	0xce, 0x36, 0xc8, 0x95, 0xbe, 0x28, 0x7c, 0x3b, 0xb7, 0x07, 0xee, 0x6d, 0xb4, 0x06, 0x19, 0x7f,
	0x7d, 0xe5, 0x5f, 0x3b, 0xb7, 0x51, 0x13, 0xc2, 0x1f, 0x72, 0x1b, 0xb9, 0xad, 0x4c, 0x74, 0xac,
	0x95, 0xc9, 0xc8, 0xad, 0xcc, 0x3f, 0xef, 0xc3, 0x5d, 0xbc, 0x8e, 0xe4, 0x05, 0xc2, 0xdd, 0x42,
	0x44, 0x91, 0xe9, 0xb6, 0x31, 0x05, 0x95, 0x5d, 0xaa, 0x10, 0xcd, 0x59, 0x60, 0x53, 0x26, 0x1f,
	0xbd, 0xff, 0xf2, 0x24, 0x3e, 0x4a, 0x72, 0xaa, 0xe3, 0x31, 0xc2, 0x5d, 0x46, 0x40, 0x58, 0x9e,
	0x2d, 0x6b, 0xc9, 0x3b, 0x84, 0x71, 0x53, 0x85, 0x91, 0x39, 0x39, 0x1c, 0x01, 0x89, 0x98, 0x9a,
	0x8f, 0x1e, 0x00, 0xc8, 0xcc, 0x72, 0x32, 0xd7, 0xc8, 0xb8, 0x04, 0x19, 0x7b, 0xec, 0x36, 0x98,
	0xa0, 0xf0, 0x16, 0xb9, 0x8a, 0x44, 0x96, 0x4e, 0x40, 0xd8, 0xc9, 0xd2, 0x09, 0xea, 0x3d, 0x65,
	0x8e, 0xd3, 0x99, 0x24, 0x13, 0x12, 0x74, 0x60, 0xec, 0xd5, 0xfd, 0x4a, 0xe9, 0x80, 0xbc, 0x41,
	0x18, 0x43, 0xd0, 0x05, 0x5d, 0x97, 0xa5, 0x14, 0x10, 0x85, 0xb2, 0x94, 0x82, 0x92, 0x4f, 0x99,
	0xe2, 0x94, 0xc6, 0x48, 0x5e, 0x9e, 0x12, 0xf9, 0x80, 0x70, 0x8f, 0xa3, 0x85, 0xc8, 0x8c, 0x1c,
	0x14, 0x9f, 0x8c, 0x4b, 0xcd, 0x46, 0x75, 0x07, 0x1e, 0xab, 0x9c, 0xc7, 0x12, 0x59, 0x90, 0xe7,
	0x61, 0xa9, 0xfb, 0x9e, 0x0b, 0xfa, 0x80, 0xbc, 0x42, 0xe2, 0x95, 0x27, 0x05, 0xf9, 0x81, 0x69,
	0x8a, 0x91, 0xd4, 0x4c, 0x44, 0x6f, 0x20, 0x54, 0xe0, 0x84, 0xc6, 0xc9, 0x98, 0x0c, 0x21, 0x46,
	0x0d, 0x31, 0x68, 0x2f, 0xed, 0xc5, 0x61, 0xd4, 0xb0, 0xa7, 0xac, 0x20, 0x3f, 0x24, 0xd1, 0x69,
	0xf8, 0x14, 0x93, 0x32, 0xc1, 0x69, 0xe4, 0x88, 0x2a, 0x49, 0x83, 0x1c, 0x21, 0xdc, 0xc5, 0x45,
	0x05, 0x99, 0x92, 0x1c, 0x0d, 0x8f, 0x12, 0x4a, 0x4d, 0x47, 0xf2, 0x05, 0xec, 0xcb, 0x1c, 0xfb,
	0x3c, 0x99, 0x95, 0xc4, 0xee, 0x1f, 0x28, 0x7b, 0x4f, 0x9c, 0x57, 0x5a, 0x76, 0x4f, 0x7c, 0x02,
	0x43, 0x76, 0x4f, 0xfc, 0xe2, 0x20, 0xd2, 0x9e, 0x38, 0x67, 0xad, 0xb4, 0x16, 0x6f, 0x1c, 0x9d,
	0xa4, 0xd1, 0xf1, 0x49, 0x1a, 0x7d, 0x3e, 0x49, 0xa3, 0xc7, 0xa7, 0xe9, 0xd8, 0xf1, 0x69, 0x3a,
	0xf6, 0xf1, 0x34, 0x1d, 0xbb, 0x9b, 0x0b, 0x8f, 0xfd, 0x30, 0x34, 0x3a, 0xdb, 0xab, 0x51, 0x6b,
	0xb3, 0x9b, 0xff, 0x56, 0x32, 0xfa, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x85, 0x2e, 0xba, 0x61,
	0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of FullTracks items.
	FullTracks(ctx context.Context, in *QueryFullTracksRequest, opts ...grpc.CallOption) (*QueryFullTracksResponse, error)
	// Queries a Section by id.
	Section(ctx context.Context, in *QueryGetSectionRequest, opts ...grpc.CallOption) (*QueryGetSectionResponse, error)
	// Queries a list of Section items.
	SectionAll(ctx context.Context, in *QueryAllSectionRequest, opts ...grpc.CallOption) (*QueryAllSectionResponse, error)
	// Queries a list of Sections items.
	Sections(ctx context.Context, in *QuerySectionsRequest, opts ...grpc.CallOption) (*QuerySectionsResponse, error)
	// Queries a Stem by id.
	Stem(ctx context.Context, in *QueryGetStemRequest, opts ...grpc.CallOption) (*QueryGetStemResponse, error)
	// Queries a list of Stem items.
	StemAll(ctx context.Context, in *QueryAllStemRequest, opts ...grpc.CallOption) (*QueryAllStemResponse, error)
	// Queries a list of Stems items.
	Stems(ctx context.Context, in *QueryStemsRequest, opts ...grpc.CallOption) (*QueryStemsResponse, error)
	// Queries a list of Metadata items.
	Metadata(ctx context.Context, in *QueryMetadataRequest, opts ...grpc.CallOption) (*QueryMetadataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FullTracks(ctx context.Context, in *QueryFullTracksRequest, opts ...grpc.CallOption) (*QueryFullTracksResponse, error) {
	out := new(QueryFullTracksResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/FullTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Section(ctx context.Context, in *QueryGetSectionRequest, opts ...grpc.CallOption) (*QueryGetSectionResponse, error) {
	out := new(QueryGetSectionResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/Section", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SectionAll(ctx context.Context, in *QueryAllSectionRequest, opts ...grpc.CallOption) (*QueryAllSectionResponse, error) {
	out := new(QueryAllSectionResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/SectionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sections(ctx context.Context, in *QuerySectionsRequest, opts ...grpc.CallOption) (*QuerySectionsResponse, error) {
	out := new(QuerySectionsResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/Sections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stem(ctx context.Context, in *QueryGetStemRequest, opts ...grpc.CallOption) (*QueryGetStemResponse, error) {
	out := new(QueryGetStemResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/Stem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StemAll(ctx context.Context, in *QueryAllStemRequest, opts ...grpc.CallOption) (*QueryAllStemResponse, error) {
	out := new(QueryAllStemResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/StemAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stems(ctx context.Context, in *QueryStemsRequest, opts ...grpc.CallOption) (*QueryStemsResponse, error) {
	out := new(QueryStemsResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/Stems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Metadata(ctx context.Context, in *QueryMetadataRequest, opts ...grpc.CallOption) (*QueryMetadataResponse, error) {
	out := new(QueryMetadataResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Query/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of FullTracks items.
	FullTracks(context.Context, *QueryFullTracksRequest) (*QueryFullTracksResponse, error)
	// Queries a Section by id.
	Section(context.Context, *QueryGetSectionRequest) (*QueryGetSectionResponse, error)
	// Queries a list of Section items.
	SectionAll(context.Context, *QueryAllSectionRequest) (*QueryAllSectionResponse, error)
	// Queries a list of Sections items.
	Sections(context.Context, *QuerySectionsRequest) (*QuerySectionsResponse, error)
	// Queries a Stem by id.
	Stem(context.Context, *QueryGetStemRequest) (*QueryGetStemResponse, error)
	// Queries a list of Stem items.
	StemAll(context.Context, *QueryAllStemRequest) (*QueryAllStemResponse, error)
	// Queries a list of Stems items.
	Stems(context.Context, *QueryStemsRequest) (*QueryStemsResponse, error)
	// Queries a list of Metadata items.
	Metadata(context.Context, *QueryMetadataRequest) (*QueryMetadataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FullTracks(ctx context.Context, req *QueryFullTracksRequest) (*QueryFullTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullTracks not implemented")
}
func (*UnimplementedQueryServer) Section(ctx context.Context, req *QueryGetSectionRequest) (*QueryGetSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Section not implemented")
}
func (*UnimplementedQueryServer) SectionAll(ctx context.Context, req *QueryAllSectionRequest) (*QueryAllSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SectionAll not implemented")
}
func (*UnimplementedQueryServer) Sections(ctx context.Context, req *QuerySectionsRequest) (*QuerySectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sections not implemented")
}
func (*UnimplementedQueryServer) Stem(ctx context.Context, req *QueryGetStemRequest) (*QueryGetStemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stem not implemented")
}
func (*UnimplementedQueryServer) StemAll(ctx context.Context, req *QueryAllStemRequest) (*QueryAllStemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StemAll not implemented")
}
func (*UnimplementedQueryServer) Stems(ctx context.Context, req *QueryStemsRequest) (*QueryStemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stems not implemented")
}
func (*UnimplementedQueryServer) Metadata(ctx context.Context, req *QueryMetadataRequest) (*QueryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FullTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/FullTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullTracks(ctx, req.(*QueryFullTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Section_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Section(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/Section",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Section(ctx, req.(*QueryGetSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SectionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SectionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/SectionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SectionAll(ctx, req.(*QueryAllSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/Sections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sections(ctx, req.(*QuerySectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/Stem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stem(ctx, req.(*QueryGetStemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StemAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StemAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/StemAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StemAll(ctx, req.(*QueryAllStemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/Stems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stems(ctx, req.(*QueryStemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Query/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Metadata(ctx, req.(*QueryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadatalayercosmos.metadatalayercosmos.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FullTracks",
			Handler:    _Query_FullTracks_Handler,
		},
		{
			MethodName: "Section",
			Handler:    _Query_Section_Handler,
		},
		{
			MethodName: "SectionAll",
			Handler:    _Query_SectionAll_Handler,
		},
		{
			MethodName: "Sections",
			Handler:    _Query_Sections_Handler,
		},
		{
			MethodName: "Stem",
			Handler:    _Query_Stem_Handler,
		},
		{
			MethodName: "StemAll",
			Handler:    _Query_StemAll_Handler,
		},
		{
			MethodName: "Stems",
			Handler:    _Query_Stems_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _Query_Metadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadatalayercosmos/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFullTracksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullTracksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullTracksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullTracksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullTracksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullTracksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FullTrack) > 0 {
		for iNdEx := len(m.FullTrack) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FullTrack[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Section.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Section) > 0 {
		for iNdEx := len(m.Section) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Section[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FullTrackID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FullTrackID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FullTrack != nil {
		{
			size, err := m.FullTrack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stem.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stem) > 0 {
		for iNdEx := len(m.Stem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FullTrackID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FullTrackID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Stems) > 0 {
		for iNdEx := len(m.Stems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FullTrack != nil {
		{
			size, err := m.FullTrack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FullTrackID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FullTrackID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Stems) > 0 {
		for iNdEx := len(m.Stems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FullTrack != nil {
		{
			size, err := m.FullTrack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFullTracksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFullTracksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FullTrack) > 0 {
		for _, e := range m.FullTrack {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Section.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Section) > 0 {
		for _, e := range m.Section {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullTrackID != 0 {
		n += 1 + sovQuery(uint64(m.FullTrackID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullTrack != nil {
		l = m.FullTrack.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetStemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stem.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stem) > 0 {
		for _, e := range m.Stem {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullTrackID != 0 {
		n += 1 + sovQuery(uint64(m.FullTrackID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullTrack != nil {
		l = m.FullTrack.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Stems) > 0 {
		for _, e := range m.Stems {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullTrackID != 0 {
		n += 1 + sovQuery(uint64(m.FullTrackID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullTrack != nil {
		l = m.FullTrack.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Stems) > 0 {
		for _, e := range m.Stems {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullTracksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullTracksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullTracksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullTracksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullTracksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullTracksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullTrack = append(m.FullTrack, &FullTrack{})
			if err := m.FullTrack[len(m.FullTrack)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Section.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = append(m.Section, Section{})
			if err := m.Section[len(m.Section)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrackID", wireType)
			}
			m.FullTrackID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullTrackID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FullTrack == nil {
				m.FullTrack = &FullTrack{}
			}
			if err := m.FullTrack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stem = append(m.Stem, Stem{})
			if err := m.Stem[len(m.Stem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrackID", wireType)
			}
			m.FullTrackID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullTrackID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FullTrack == nil {
				m.FullTrack = &FullTrack{}
			}
			if err := m.FullTrack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stems = append(m.Stems, &Stem{})
			if err := m.Stems[len(m.Stems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrackID", wireType)
			}
			m.FullTrackID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullTrackID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FullTrack == nil {
				m.FullTrack = &FullTrack{}
			}
			if err := m.FullTrack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stems = append(m.Stems, &Stem{})
			if err := m.Stems[len(m.Stems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
