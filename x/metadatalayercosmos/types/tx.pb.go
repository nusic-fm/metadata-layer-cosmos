// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadatalayercosmos/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateFullTrack struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid               string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	ArtistName        string `protobuf:"bytes,3,opt,name=artistName,proto3" json:"artistName,omitempty"`
	TrackTitle        string `protobuf:"bytes,4,opt,name=trackTitle,proto3" json:"trackTitle,omitempty"`
	Album             string `protobuf:"bytes,5,opt,name=album,proto3" json:"album,omitempty"`
	Bpm               string `protobuf:"bytes,6,opt,name=bpm,proto3" json:"bpm,omitempty"`
	Key               string `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Bars              string `protobuf:"bytes,8,opt,name=bars,proto3" json:"bars,omitempty"`
	Beats             string `protobuf:"bytes,9,opt,name=beats,proto3" json:"beats,omitempty"`
	Genre             string `protobuf:"bytes,10,opt,name=genre,proto3" json:"genre,omitempty"`
	TimeSignature     string `protobuf:"bytes,11,opt,name=timeSignature,proto3" json:"timeSignature,omitempty"`
	DurationMs        string `protobuf:"bytes,12,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	StartBeatOffsetMs string `protobuf:"bytes,13,opt,name=startBeatOffsetMs,proto3" json:"startBeatOffsetMs,omitempty"`
	SectionsCount     string `protobuf:"bytes,14,opt,name=sectionsCount,proto3" json:"sectionsCount,omitempty"`
	StemsCount        string `protobuf:"bytes,15,opt,name=stemsCount,proto3" json:"stemsCount,omitempty"`
	Id                uint64 `protobuf:"varint,16,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateFullTrack) Reset()         { *m = MsgCreateFullTrack{} }
func (m *MsgCreateFullTrack) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFullTrack) ProtoMessage()    {}
func (*MsgCreateFullTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_6217cca3336b267f, []int{0}
}
func (m *MsgCreateFullTrack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFullTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFullTrack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFullTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFullTrack.Merge(m, src)
}
func (m *MsgCreateFullTrack) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFullTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFullTrack.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFullTrack proto.InternalMessageInfo

func (m *MsgCreateFullTrack) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateFullTrack) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *MsgCreateFullTrack) GetArtistName() string {
	if m != nil {
		return m.ArtistName
	}
	return ""
}

func (m *MsgCreateFullTrack) GetTrackTitle() string {
	if m != nil {
		return m.TrackTitle
	}
	return ""
}

func (m *MsgCreateFullTrack) GetAlbum() string {
	if m != nil {
		return m.Album
	}
	return ""
}

func (m *MsgCreateFullTrack) GetBpm() string {
	if m != nil {
		return m.Bpm
	}
	return ""
}

func (m *MsgCreateFullTrack) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgCreateFullTrack) GetBars() string {
	if m != nil {
		return m.Bars
	}
	return ""
}

func (m *MsgCreateFullTrack) GetBeats() string {
	if m != nil {
		return m.Beats
	}
	return ""
}

func (m *MsgCreateFullTrack) GetGenre() string {
	if m != nil {
		return m.Genre
	}
	return ""
}

func (m *MsgCreateFullTrack) GetTimeSignature() string {
	if m != nil {
		return m.TimeSignature
	}
	return ""
}

func (m *MsgCreateFullTrack) GetDurationMs() string {
	if m != nil {
		return m.DurationMs
	}
	return ""
}

func (m *MsgCreateFullTrack) GetStartBeatOffsetMs() string {
	if m != nil {
		return m.StartBeatOffsetMs
	}
	return ""
}

func (m *MsgCreateFullTrack) GetSectionsCount() string {
	if m != nil {
		return m.SectionsCount
	}
	return ""
}

func (m *MsgCreateFullTrack) GetStemsCount() string {
	if m != nil {
		return m.StemsCount
	}
	return ""
}

func (m *MsgCreateFullTrack) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreateFullTrackResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateFullTrackResponse) Reset()         { *m = MsgCreateFullTrackResponse{} }
func (m *MsgCreateFullTrackResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFullTrackResponse) ProtoMessage()    {}
func (*MsgCreateFullTrackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6217cca3336b267f, []int{1}
}
func (m *MsgCreateFullTrackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFullTrackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFullTrackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFullTrackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFullTrackResponse.Merge(m, src)
}
func (m *MsgCreateFullTrackResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFullTrackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFullTrackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFullTrackResponse proto.InternalMessageInfo

func (m *MsgCreateFullTrackResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreateSection struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FullTrackID        uint64 `protobuf:"varint,2,opt,name=fullTrackID,proto3" json:"fullTrackID,omitempty"`
	SectionName        string `protobuf:"bytes,3,opt,name=sectionName,proto3" json:"sectionName,omitempty"`
	SectionStartTimeMs uint64 `protobuf:"varint,4,opt,name=sectionStartTimeMs,proto3" json:"sectionStartTimeMs,omitempty"`
	SectionEndTimeMs   uint64 `protobuf:"varint,5,opt,name=sectionEndTimeMs,proto3" json:"sectionEndTimeMs,omitempty"`
	Id                 uint64 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateSection) Reset()         { *m = MsgCreateSection{} }
func (m *MsgCreateSection) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSection) ProtoMessage()    {}
func (*MsgCreateSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_6217cca3336b267f, []int{2}
}
func (m *MsgCreateSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSection.Merge(m, src)
}
func (m *MsgCreateSection) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSection) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSection.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSection proto.InternalMessageInfo

func (m *MsgCreateSection) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSection) GetFullTrackID() uint64 {
	if m != nil {
		return m.FullTrackID
	}
	return 0
}

func (m *MsgCreateSection) GetSectionName() string {
	if m != nil {
		return m.SectionName
	}
	return ""
}

func (m *MsgCreateSection) GetSectionStartTimeMs() uint64 {
	if m != nil {
		return m.SectionStartTimeMs
	}
	return 0
}

func (m *MsgCreateSection) GetSectionEndTimeMs() uint64 {
	if m != nil {
		return m.SectionEndTimeMs
	}
	return 0
}

func (m *MsgCreateSection) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreateSectionResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateSectionResponse) Reset()         { *m = MsgCreateSectionResponse{} }
func (m *MsgCreateSectionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSectionResponse) ProtoMessage()    {}
func (*MsgCreateSectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6217cca3336b267f, []int{3}
}
func (m *MsgCreateSectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSectionResponse.Merge(m, src)
}
func (m *MsgCreateSectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSectionResponse proto.InternalMessageInfo

func (m *MsgCreateSectionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreateStem struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FullTrackID uint64 `protobuf:"varint,2,opt,name=fullTrackID,proto3" json:"fullTrackID,omitempty"`
	StemCid     string `protobuf:"bytes,3,opt,name=stemCid,proto3" json:"stemCid,omitempty"`
	StemName    string `protobuf:"bytes,4,opt,name=stemName,proto3" json:"stemName,omitempty"`
	StemType    string `protobuf:"bytes,5,opt,name=stemType,proto3" json:"stemType,omitempty"`
	Id          uint64 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateStem) Reset()         { *m = MsgCreateStem{} }
func (m *MsgCreateStem) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStem) ProtoMessage()    {}
func (*MsgCreateStem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6217cca3336b267f, []int{4}
}
func (m *MsgCreateStem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStem.Merge(m, src)
}
func (m *MsgCreateStem) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStem proto.InternalMessageInfo

func (m *MsgCreateStem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateStem) GetFullTrackID() uint64 {
	if m != nil {
		return m.FullTrackID
	}
	return 0
}

func (m *MsgCreateStem) GetStemCid() string {
	if m != nil {
		return m.StemCid
	}
	return ""
}

func (m *MsgCreateStem) GetStemName() string {
	if m != nil {
		return m.StemName
	}
	return ""
}

func (m *MsgCreateStem) GetStemType() string {
	if m != nil {
		return m.StemType
	}
	return ""
}

func (m *MsgCreateStem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreateStemResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateStemResponse) Reset()         { *m = MsgCreateStemResponse{} }
func (m *MsgCreateStemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStemResponse) ProtoMessage()    {}
func (*MsgCreateStemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6217cca3336b267f, []int{5}
}
func (m *MsgCreateStemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStemResponse.Merge(m, src)
}
func (m *MsgCreateStemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStemResponse proto.InternalMessageInfo

func (m *MsgCreateStemResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCreateFullTrack)(nil), "metadatalayercosmos.metadatalayercosmos.MsgCreateFullTrack")
	proto.RegisterType((*MsgCreateFullTrackResponse)(nil), "metadatalayercosmos.metadatalayercosmos.MsgCreateFullTrackResponse")
	proto.RegisterType((*MsgCreateSection)(nil), "metadatalayercosmos.metadatalayercosmos.MsgCreateSection")
	proto.RegisterType((*MsgCreateSectionResponse)(nil), "metadatalayercosmos.metadatalayercosmos.MsgCreateSectionResponse")
	proto.RegisterType((*MsgCreateStem)(nil), "metadatalayercosmos.metadatalayercosmos.MsgCreateStem")
	proto.RegisterType((*MsgCreateStemResponse)(nil), "metadatalayercosmos.metadatalayercosmos.MsgCreateStemResponse")
}

func init() { proto.RegisterFile("metadatalayercosmos/tx.proto", fileDescriptor_6217cca3336b267f) }

var fileDescriptor_6217cca3336b267f = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4d, 0x6b, 0x13, 0x4f,
	0x18, 0xc0, 0x33, 0x79, 0x6d, 0x9f, 0xfe, 0xd3, 0xe6, 0x3f, 0x28, 0x0c, 0x41, 0x96, 0x50, 0x84,
	0x96, 0xd2, 0xa6, 0xa8, 0x20, 0x88, 0x20, 0xd8, 0xa8, 0x20, 0x12, 0x85, 0x24, 0x27, 0x6f, 0xb3,
	0xd9, 0x27, 0x61, 0x49, 0xf6, 0x85, 0x9d, 0x09, 0x34, 0x77, 0xaf, 0x82, 0xe0, 0xe7, 0xf0, 0xe2,
	0x67, 0xf0, 0xe0, 0xb1, 0x47, 0x0f, 0x1e, 0x24, 0xf9, 0x22, 0x32, 0x2f, 0xbb, 0x49, 0x9a, 0x54,
	0x34, 0xbd, 0xcd, 0xf3, 0x7b, 0xde, 0x9f, 0x79, 0x66, 0x17, 0xee, 0x05, 0x28, 0xb9, 0xc7, 0x25,
	0x1f, 0xf3, 0x29, 0x26, 0xfd, 0x48, 0x04, 0x91, 0x38, 0x97, 0x97, 0xcd, 0x38, 0x89, 0x64, 0x44,
	0x8f, 0x36, 0x68, 0x9b, 0x1b, 0xd8, 0xe1, 0xb7, 0x02, 0xd0, 0xb6, 0x18, 0xb6, 0x12, 0xe4, 0x12,
	0x5f, 0x4d, 0xc6, 0xe3, 0x5e, 0xc2, 0xfb, 0x23, 0xca, 0xa0, 0xd2, 0x57, 0x28, 0x4a, 0x18, 0x69,
	0x90, 0xe3, 0xdd, 0x4e, 0x2a, 0xd2, 0x1a, 0x14, 0xfa, 0xbe, 0xc7, 0xf2, 0x9a, 0xaa, 0x23, 0x75,
	0x00, 0x78, 0x22, 0x7d, 0x21, 0xdf, 0xf2, 0x00, 0x59, 0x41, 0x2b, 0x96, 0x88, 0xd2, 0x4b, 0x15,
	0xb4, 0xe7, 0xcb, 0x31, 0xb2, 0xa2, 0xd1, 0x2f, 0x08, 0xbd, 0x03, 0x25, 0x3e, 0x76, 0x27, 0x01,
	0x2b, 0x69, 0x95, 0x11, 0x54, 0x1e, 0x37, 0x0e, 0x58, 0xd9, 0xe4, 0x71, 0x63, 0x4d, 0x46, 0x38,
	0x65, 0x15, 0x43, 0x46, 0x38, 0xa5, 0x14, 0x8a, 0x2e, 0x4f, 0x04, 0xdb, 0xd1, 0x48, 0x9f, 0x55,
	0x34, 0x17, 0xb9, 0x14, 0x6c, 0xd7, 0x44, 0xd3, 0x82, 0xa2, 0x43, 0x0c, 0x13, 0x64, 0x60, 0xa8,
	0x16, 0xe8, 0x7d, 0xa8, 0x4a, 0x3f, 0xc0, 0xae, 0x3f, 0x0c, 0xb9, 0x9c, 0x24, 0xc8, 0xf6, 0xb4,
	0x76, 0x15, 0xaa, 0xfa, 0xbd, 0x49, 0xc2, 0xa5, 0x1f, 0x85, 0x6d, 0xc1, 0xfe, 0x33, 0xf5, 0x2f,
	0x08, 0x3d, 0x85, 0xff, 0x85, 0xe4, 0x89, 0xbc, 0x40, 0x2e, 0xdf, 0x0d, 0x06, 0x02, 0x65, 0x5b,
	0xb0, 0xaa, 0x36, 0x5b, 0x57, 0xa8, 0x9c, 0x02, 0xfb, 0xca, 0x55, 0xb4, 0xa2, 0x49, 0x28, 0xd9,
	0xbe, 0xc9, 0xb9, 0x02, 0x55, 0x4e, 0x21, 0x31, 0xb0, 0x26, 0x07, 0x26, 0xe7, 0x82, 0xd0, 0x7d,
	0xc8, 0xfb, 0x1e, 0xab, 0x35, 0xc8, 0x71, 0xb1, 0x93, 0xf7, 0xbd, 0xc3, 0x53, 0xa8, 0xaf, 0xdf,
	0x62, 0x07, 0x45, 0x1c, 0x85, 0x02, 0xad, 0x35, 0xc9, 0xac, 0x7f, 0x12, 0xa8, 0x65, 0xe6, 0x5d,
	0x93, 0xf8, 0x0f, 0x57, 0xde, 0x80, 0xbd, 0x41, 0x1a, 0xf3, 0xf5, 0x0b, 0x7d, 0xf5, 0xc5, 0xce,
	0x32, 0x52, 0x16, 0xb6, 0xfe, 0xa5, 0x1d, 0x58, 0x46, 0xb4, 0x09, 0xd4, 0x8a, 0x5d, 0x35, 0x92,
	0x9e, 0x1f, 0x60, 0x5b, 0xe8, 0x65, 0x28, 0x76, 0x36, 0x68, 0xe8, 0x09, 0xd4, 0x2c, 0x7d, 0x19,
	0x7a, 0xd6, 0xba, 0xa4, 0xad, 0xd7, 0xb8, 0x6d, 0xaf, 0x9c, 0xb5, 0x77, 0x02, 0xec, 0x7a, 0x77,
	0x37, 0x8e, 0xe2, 0x0b, 0x81, 0xea, 0xc2, 0x58, 0x62, 0x70, 0xab, 0x39, 0x30, 0xa8, 0xa8, 0x4b,
	0x6a, 0xf9, 0x9e, 0x9d, 0x41, 0x2a, 0xd2, 0x3a, 0xec, 0xa8, 0xa3, 0x1e, 0x8f, 0x79, 0x02, 0x99,
	0x9c, 0xea, 0x7a, 0xd3, 0x18, 0xed, 0x1b, 0xc8, 0xe4, 0xb5, 0xde, 0x8e, 0xe0, 0xee, 0x4a, 0xb9,
	0x37, 0x35, 0xf6, 0xf0, 0x6b, 0x01, 0x0a, 0x6d, 0x31, 0xa4, 0x9f, 0x09, 0x1c, 0x5c, 0x7f, 0xdd,
	0x4f, 0x9b, 0x7f, 0xf9, 0x79, 0x68, 0xae, 0x2f, 0x55, 0xbd, 0x75, 0x0b, 0xe7, 0xac, 0xda, 0x8f,
	0x04, 0xaa, 0xab, 0xeb, 0xf7, 0xe4, 0xdf, 0xc3, 0x5a, 0xd7, 0xfa, 0xf3, 0xad, 0x5d, 0xb3, 0x7a,
	0x3e, 0x10, 0x80, 0xa5, 0x1d, 0x78, 0xbc, 0x45, 0x44, 0x89, 0x41, 0xfd, 0xd9, 0x76, 0x7e, 0x69,
	0x19, 0x17, 0x6f, 0xbe, 0xcf, 0x1c, 0x72, 0x35, 0x73, 0xc8, 0xaf, 0x99, 0x43, 0x3e, 0xcd, 0x9d,
	0xdc, 0xd5, 0xdc, 0xc9, 0xfd, 0x98, 0x3b, 0xb9, 0xf7, 0x0f, 0xd2, 0x20, 0x67, 0x3a, 0xca, 0x99,
	0xfd, 0xe0, 0x5f, 0x9e, 0x6f, 0xfc, 0x0d, 0x4c, 0x63, 0x14, 0x6e, 0x59, 0xff, 0x0a, 0x1e, 0xfd,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x41, 0x57, 0x5f, 0x22, 0x2a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateFullTrack(ctx context.Context, in *MsgCreateFullTrack, opts ...grpc.CallOption) (*MsgCreateFullTrackResponse, error)
	CreateSection(ctx context.Context, in *MsgCreateSection, opts ...grpc.CallOption) (*MsgCreateSectionResponse, error)
	CreateStem(ctx context.Context, in *MsgCreateStem, opts ...grpc.CallOption) (*MsgCreateStemResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateFullTrack(ctx context.Context, in *MsgCreateFullTrack, opts ...grpc.CallOption) (*MsgCreateFullTrackResponse, error) {
	out := new(MsgCreateFullTrackResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Msg/CreateFullTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSection(ctx context.Context, in *MsgCreateSection, opts ...grpc.CallOption) (*MsgCreateSectionResponse, error) {
	out := new(MsgCreateSectionResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Msg/CreateSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateStem(ctx context.Context, in *MsgCreateStem, opts ...grpc.CallOption) (*MsgCreateStemResponse, error) {
	out := new(MsgCreateStemResponse)
	err := c.cc.Invoke(ctx, "/metadatalayercosmos.metadatalayercosmos.Msg/CreateStem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateFullTrack(context.Context, *MsgCreateFullTrack) (*MsgCreateFullTrackResponse, error)
	CreateSection(context.Context, *MsgCreateSection) (*MsgCreateSectionResponse, error)
	CreateStem(context.Context, *MsgCreateStem) (*MsgCreateStemResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateFullTrack(ctx context.Context, req *MsgCreateFullTrack) (*MsgCreateFullTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFullTrack not implemented")
}
func (*UnimplementedMsgServer) CreateSection(ctx context.Context, req *MsgCreateSection) (*MsgCreateSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSection not implemented")
}
func (*UnimplementedMsgServer) CreateStem(ctx context.Context, req *MsgCreateStem) (*MsgCreateStemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStem not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateFullTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFullTrack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFullTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Msg/CreateFullTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFullTrack(ctx, req.(*MsgCreateFullTrack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Msg/CreateSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSection(ctx, req.(*MsgCreateSection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateStem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateStem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateStem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadatalayercosmos.metadatalayercosmos.Msg/CreateStem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateStem(ctx, req.(*MsgCreateStem))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadatalayercosmos.metadatalayercosmos.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFullTrack",
			Handler:    _Msg_CreateFullTrack_Handler,
		},
		{
			MethodName: "CreateSection",
			Handler:    _Msg_CreateSection_Handler,
		},
		{
			MethodName: "CreateStem",
			Handler:    _Msg_CreateStem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadatalayercosmos/tx.proto",
}

func (m *MsgCreateFullTrack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFullTrack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFullTrack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.StemsCount) > 0 {
		i -= len(m.StemsCount)
		copy(dAtA[i:], m.StemsCount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StemsCount)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SectionsCount) > 0 {
		i -= len(m.SectionsCount)
		copy(dAtA[i:], m.SectionsCount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SectionsCount)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StartBeatOffsetMs) > 0 {
		i -= len(m.StartBeatOffsetMs)
		copy(dAtA[i:], m.StartBeatOffsetMs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StartBeatOffsetMs)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DurationMs) > 0 {
		i -= len(m.DurationMs)
		copy(dAtA[i:], m.DurationMs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DurationMs)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TimeSignature) > 0 {
		i -= len(m.TimeSignature)
		copy(dAtA[i:], m.TimeSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TimeSignature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Genre) > 0 {
		i -= len(m.Genre)
		copy(dAtA[i:], m.Genre)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Genre)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Beats) > 0 {
		i -= len(m.Beats)
		copy(dAtA[i:], m.Beats)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Beats)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Bars) > 0 {
		i -= len(m.Bars)
		copy(dAtA[i:], m.Bars)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bars)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bpm) > 0 {
		i -= len(m.Bpm)
		copy(dAtA[i:], m.Bpm)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bpm)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Album) > 0 {
		i -= len(m.Album)
		copy(dAtA[i:], m.Album)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Album)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TrackTitle) > 0 {
		i -= len(m.TrackTitle)
		copy(dAtA[i:], m.TrackTitle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrackTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ArtistName) > 0 {
		i -= len(m.ArtistName)
		copy(dAtA[i:], m.ArtistName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ArtistName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateFullTrackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFullTrackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFullTrackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.SectionEndTimeMs != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SectionEndTimeMs))
		i--
		dAtA[i] = 0x28
	}
	if m.SectionStartTimeMs != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SectionStartTimeMs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SectionName) > 0 {
		i -= len(m.SectionName)
		copy(dAtA[i:], m.SectionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FullTrackID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FullTrackID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateStem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if len(m.StemType) > 0 {
		i -= len(m.StemType)
		copy(dAtA[i:], m.StemType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StemType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StemName) > 0 {
		i -= len(m.StemName)
		copy(dAtA[i:], m.StemName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StemName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StemCid) > 0 {
		i -= len(m.StemCid)
		copy(dAtA[i:], m.StemCid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StemCid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FullTrackID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FullTrackID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateStemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateFullTrack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ArtistName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrackTitle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Album)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Bpm)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Bars)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Beats)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Genre)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TimeSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DurationMs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StartBeatOffsetMs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SectionsCount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StemsCount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreateFullTrackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreateSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FullTrackID != 0 {
		n += 1 + sovTx(uint64(m.FullTrackID))
	}
	l = len(m.SectionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SectionStartTimeMs != 0 {
		n += 1 + sovTx(uint64(m.SectionStartTimeMs))
	}
	if m.SectionEndTimeMs != 0 {
		n += 1 + sovTx(uint64(m.SectionEndTimeMs))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreateSectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreateStem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FullTrackID != 0 {
		n += 1 + sovTx(uint64(m.FullTrackID))
	}
	l = len(m.StemCid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StemName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StemType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreateStemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateFullTrack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFullTrack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFullTrack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtistName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtistName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Album", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Album = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bpm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bpm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beats = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DurationMs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBeatOffsetMs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartBeatOffsetMs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionsCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectionsCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StemsCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StemsCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateFullTrackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFullTrackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFullTrackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrackID", wireType)
			}
			m.FullTrackID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullTrackID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionStartTimeMs", wireType)
			}
			m.SectionStartTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionStartTimeMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionEndTimeMs", wireType)
			}
			m.SectionEndTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionEndTimeMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTrackID", wireType)
			}
			m.FullTrackID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullTrackID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StemCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StemCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
