// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadatalayercosmos/fulltrack.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FullTrack struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid               string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	ArtistName        string `protobuf:"bytes,3,opt,name=artistName,proto3" json:"artistName,omitempty"`
	TrackTitle        string `protobuf:"bytes,4,opt,name=trackTitle,proto3" json:"trackTitle,omitempty"`
	Album             string `protobuf:"bytes,5,opt,name=album,proto3" json:"album,omitempty"`
	Bpm               string `protobuf:"bytes,6,opt,name=bpm,proto3" json:"bpm,omitempty"`
	Key               string `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Bars              string `protobuf:"bytes,8,opt,name=bars,proto3" json:"bars,omitempty"`
	Beats             string `protobuf:"bytes,9,opt,name=beats,proto3" json:"beats,omitempty"`
	Genre             string `protobuf:"bytes,10,opt,name=genre,proto3" json:"genre,omitempty"`
	TimeSignature     string `protobuf:"bytes,11,opt,name=timeSignature,proto3" json:"timeSignature,omitempty"`
	DurationMs        string `protobuf:"bytes,12,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	StartBeatOffsetMs string `protobuf:"bytes,13,opt,name=startBeatOffsetMs,proto3" json:"startBeatOffsetMs,omitempty"`
	SectionsCount     string `protobuf:"bytes,14,opt,name=sectionsCount,proto3" json:"sectionsCount,omitempty"`
	StemsCount        string `protobuf:"bytes,15,opt,name=stemsCount,proto3" json:"stemsCount,omitempty"`
	Id                uint64 `protobuf:"varint,16,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FullTrack) Reset()         { *m = FullTrack{} }
func (m *FullTrack) String() string { return proto.CompactTextString(m) }
func (*FullTrack) ProtoMessage()    {}
func (*FullTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac1898865826fa62, []int{0}
}
func (m *FullTrack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullTrack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullTrack.Merge(m, src)
}
func (m *FullTrack) XXX_Size() int {
	return m.Size()
}
func (m *FullTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_FullTrack.DiscardUnknown(m)
}

var xxx_messageInfo_FullTrack proto.InternalMessageInfo

func (m *FullTrack) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *FullTrack) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *FullTrack) GetArtistName() string {
	if m != nil {
		return m.ArtistName
	}
	return ""
}

func (m *FullTrack) GetTrackTitle() string {
	if m != nil {
		return m.TrackTitle
	}
	return ""
}

func (m *FullTrack) GetAlbum() string {
	if m != nil {
		return m.Album
	}
	return ""
}

func (m *FullTrack) GetBpm() string {
	if m != nil {
		return m.Bpm
	}
	return ""
}

func (m *FullTrack) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FullTrack) GetBars() string {
	if m != nil {
		return m.Bars
	}
	return ""
}

func (m *FullTrack) GetBeats() string {
	if m != nil {
		return m.Beats
	}
	return ""
}

func (m *FullTrack) GetGenre() string {
	if m != nil {
		return m.Genre
	}
	return ""
}

func (m *FullTrack) GetTimeSignature() string {
	if m != nil {
		return m.TimeSignature
	}
	return ""
}

func (m *FullTrack) GetDurationMs() string {
	if m != nil {
		return m.DurationMs
	}
	return ""
}

func (m *FullTrack) GetStartBeatOffsetMs() string {
	if m != nil {
		return m.StartBeatOffsetMs
	}
	return ""
}

func (m *FullTrack) GetSectionsCount() string {
	if m != nil {
		return m.SectionsCount
	}
	return ""
}

func (m *FullTrack) GetStemsCount() string {
	if m != nil {
		return m.StemsCount
	}
	return ""
}

func (m *FullTrack) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*FullTrack)(nil), "metadatalayercosmos.metadatalayercosmos.FullTrack")
}

func init() {
	proto.RegisterFile("metadatalayercosmos/fulltrack.proto", fileDescriptor_ac1898865826fa62)
}

var fileDescriptor_ac1898865826fa62 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x4e, 0x22, 0x41,
	0x10, 0xc6, 0x19, 0xfe, 0x2e, 0xbd, 0x0b, 0xcb, 0x76, 0xf6, 0x50, 0xa7, 0x09, 0x51, 0x13, 0x39,
	0x08, 0xc4, 0xf8, 0x06, 0x98, 0x78, 0x31, 0x68, 0x82, 0x9c, 0xbc, 0xf5, 0xcc, 0x14, 0xa4, 0xc3,
	0xfc, 0x4b, 0x77, 0x4d, 0xe2, 0xbc, 0x85, 0xef, 0xe3, 0x0b, 0x78, 0xe4, 0xe8, 0xd1, 0xc0, 0x8b,
	0x98, 0xee, 0x86, 0x20, 0x91, 0x5b, 0x7f, 0xbf, 0xaf, 0xba, 0xbe, 0x4a, 0xaa, 0xd8, 0x79, 0x82,
	0x24, 0x22, 0x41, 0x22, 0x16, 0x25, 0xaa, 0x30, 0xd3, 0x49, 0xa6, 0xc7, 0x8b, 0x22, 0x8e, 0x49,
	0x89, 0x70, 0x35, 0xca, 0x55, 0x46, 0x19, 0xbf, 0x3c, 0x51, 0x34, 0x3a, 0xc1, 0xce, 0xde, 0x6a,
	0xac, 0x7d, 0x57, 0xc4, 0xf1, 0xdc, 0x7c, 0xe6, 0xc0, 0x5a, 0xa1, 0x42, 0x41, 0x99, 0x02, 0xaf,
	0xef, 0x0d, 0xda, 0xb3, 0xbd, 0xe4, 0x3d, 0x56, 0x0b, 0x65, 0x04, 0x55, 0x4b, 0xcd, 0x93, 0xfb,
	0x8c, 0x09, 0x45, 0x52, 0xd3, 0x83, 0x48, 0x10, 0x6a, 0xd6, 0xf8, 0x46, 0x8c, 0x6f, 0x27, 0x9a,
	0x4b, 0x8a, 0x11, 0xea, 0xce, 0x3f, 0x10, 0xfe, 0x9f, 0x35, 0x44, 0x1c, 0x14, 0x09, 0x34, 0xac,
	0xe5, 0x84, 0xc9, 0x09, 0xf2, 0x04, 0x9a, 0x2e, 0x27, 0xc8, 0x2d, 0x59, 0x61, 0x09, 0x2d, 0x47,
	0x56, 0x58, 0x72, 0xce, 0xea, 0x81, 0x50, 0x1a, 0x7e, 0x59, 0x64, 0xdf, 0xa6, 0x5b, 0x80, 0x82,
	0x34, 0xb4, 0x5d, 0x37, 0x2b, 0x0c, 0x5d, 0x62, 0xaa, 0x10, 0x98, 0xa3, 0x56, 0xf0, 0x0b, 0xd6,
	0x21, 0x99, 0xe0, 0x93, 0x5c, 0xa6, 0x82, 0x0a, 0x85, 0xf0, 0xdb, 0xba, 0xc7, 0xd0, 0xcc, 0x1f,
	0x15, 0x4a, 0x90, 0xcc, 0xd2, 0xa9, 0x86, 0x3f, 0x6e, 0xfe, 0x03, 0xe1, 0x57, 0xec, 0x9f, 0x26,
	0xa1, 0x68, 0x82, 0x82, 0x1e, 0x17, 0x0b, 0x8d, 0x34, 0xd5, 0xd0, 0xb1, 0x65, 0x3f, 0x0d, 0x93,
	0xa9, 0x31, 0x34, 0x5f, 0xf5, 0x6d, 0x56, 0xa4, 0x04, 0x5d, 0x97, 0x79, 0x04, 0x4d, 0xa6, 0x26,
	0x4c, 0x76, 0x25, 0x7f, 0x5d, 0xe6, 0x81, 0xf0, 0x2e, 0xab, 0xca, 0x08, 0x7a, 0x7d, 0x6f, 0x50,
	0x9f, 0x55, 0x65, 0x34, 0xb9, 0x7f, 0xdf, 0xf8, 0xde, 0x7a, 0xe3, 0x7b, 0x9f, 0x1b, 0xdf, 0x7b,
	0xdd, 0xfa, 0x95, 0xf5, 0xd6, 0xaf, 0x7c, 0x6c, 0xfd, 0xca, 0xf3, 0xf5, 0x7e, 0xd9, 0x43, 0xbb,
	0xed, 0xe1, 0xee, 0x4e, 0x5e, 0xc6, 0xa7, 0xae, 0x87, 0xca, 0x1c, 0x75, 0xd0, 0xb4, 0xa7, 0x73,
	0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x26, 0xfa, 0x04, 0x61, 0x02, 0x00, 0x00,
}

func (m *FullTrack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullTrack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullTrack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintFulltrack(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.StemsCount) > 0 {
		i -= len(m.StemsCount)
		copy(dAtA[i:], m.StemsCount)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.StemsCount)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SectionsCount) > 0 {
		i -= len(m.SectionsCount)
		copy(dAtA[i:], m.SectionsCount)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.SectionsCount)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StartBeatOffsetMs) > 0 {
		i -= len(m.StartBeatOffsetMs)
		copy(dAtA[i:], m.StartBeatOffsetMs)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.StartBeatOffsetMs)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DurationMs) > 0 {
		i -= len(m.DurationMs)
		copy(dAtA[i:], m.DurationMs)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.DurationMs)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TimeSignature) > 0 {
		i -= len(m.TimeSignature)
		copy(dAtA[i:], m.TimeSignature)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.TimeSignature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Genre) > 0 {
		i -= len(m.Genre)
		copy(dAtA[i:], m.Genre)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Genre)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Beats) > 0 {
		i -= len(m.Beats)
		copy(dAtA[i:], m.Beats)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Beats)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Bars) > 0 {
		i -= len(m.Bars)
		copy(dAtA[i:], m.Bars)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Bars)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bpm) > 0 {
		i -= len(m.Bpm)
		copy(dAtA[i:], m.Bpm)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Bpm)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Album) > 0 {
		i -= len(m.Album)
		copy(dAtA[i:], m.Album)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Album)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TrackTitle) > 0 {
		i -= len(m.TrackTitle)
		copy(dAtA[i:], m.TrackTitle)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.TrackTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ArtistName) > 0 {
		i -= len(m.ArtistName)
		copy(dAtA[i:], m.ArtistName)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.ArtistName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFulltrack(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFulltrack(dAtA []byte, offset int, v uint64) int {
	offset -= sovFulltrack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FullTrack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.ArtistName)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.TrackTitle)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Album)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Bpm)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Bars)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Beats)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.Genre)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.TimeSignature)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.DurationMs)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.StartBeatOffsetMs)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.SectionsCount)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	l = len(m.StemsCount)
	if l > 0 {
		n += 1 + l + sovFulltrack(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovFulltrack(uint64(m.Id))
	}
	return n
}

func sovFulltrack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFulltrack(x uint64) (n int) {
	return sovFulltrack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FullTrack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFulltrack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullTrack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullTrack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtistName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtistName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Album", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Album = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bpm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bpm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beats = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DurationMs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBeatOffsetMs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartBeatOffsetMs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionsCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectionsCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StemsCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulltrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulltrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StemsCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFulltrack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFulltrack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFulltrack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFulltrack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFulltrack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFulltrack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFulltrack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFulltrack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFulltrack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFulltrack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFulltrack = fmt.Errorf("proto: unexpected end of group")
)
